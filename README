    本项目对常用的设计模式进行了编码实现，同时加入了一些自己的理解，方便以后翻阅

    六大原则:
            1.开闭原则(Open Close Principle)
              对扩展开放，对修改关闭
            2.里氏代换原则(Liskov Substition Principle)
              任何基类可以出现的地方，子类一定可以出现，LSP是继承复用的基础
            3.依赖倒转原则(Dependency Inversion Principle)
              DI是开闭原则的基础:针对接口编程，依赖于抽象而不是具体
            4.接口隔离原则(Interface Segregation Principle)
              ①.使用多个隔离的接口，要比使用单个接口好
              ②.降低类之间的耦合度
            5.迪米特法则(Demeter Principle)
              最少知道原则，一个实体尽量少的与其他实体发生作用
            6.合成复用原则(Composite Reuse Principle)
              尽量使用合成/聚合的方式，而不是继承

    一:设计模式分类
        1.创建型:
            ①.工厂模式(Factory Pattern)
            ②.抽象工厂模式(Abstract Factory Pattern)
            ③.单例模式(Singleton Pattern)
            ④.建造者模式(Builder Pattern)
            ⑤.原型模式（Prototype Pattern
        2.结构型
            ①.适配器模式(Adapter Pattern)
            ②.桥接模式(Bridge Pattern)
            ③.过滤器模式(Filter、Criteria Pattern)(非23中之一)
            ④.组合模式(Composite Pattern)
            ⑤.装饰器模式(Decorator Pattern)
            ⑥.外观模式(Facade Pattern)
            ⑦.享元模式(Flyweight Pattern)
            ⑧.代理模式(Proxy Pattern)
        3.行为型
            ①.责任链模式（Chain of Responsibility Pattern）
            ②.命令模式（Command Pattern）
            ③.解释器模式（Interpreter Pattern）
            ④.迭代器模式（Iterator Pattern）
            ⑤.中介者模式（Mediator Pattern）
            ⑥.备忘录模式（Memento Pattern）
            ⑦.观察者模式（Observer Pattern）
            ⑧.状态模式（State Pattern）
            ⑨.空对象模式（Null Object Pattern）(非23中之一)
            ⑩.策略模式（Strategy Pattern）
            ⑪.模板模式（Template Pattern）
            ⑫.访问者模式（Visitor Pattern）

    二:源码使用举例分析
        1.spring
        2.tomcat
    三:从哪些方面来分析一个设计模式的优劣:
        1.解耦，减少彼此之间的依赖，可以独立变化，职责清晰
        2.透明度，细节隐藏，只关心对外暴露的模块
        3.扩展性
        4.灵活性
        5.安全性
        6.六个原则
    目的:
        1.解决通用问题
        2.使用更方便
